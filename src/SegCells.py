# Form implementation generated from reading ui file 'SegCells.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
from PyQt6.QtWidgets import (QApplication, QWidget, QPushButton ,QTextEdit, QComboBox, QFileDialog, QHBoxLayout, QVBoxLayout)
from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtGui import QImage, QPixmap
from PyQt6.QtCore import QFileInfo
import matplotlib.pyplot as plt
from roboflow import Roboflow
from ultralytics import YOLO
from PIL import Image
import numpy as np
import czifile
import sys
import os
import io
from PyQt6.QtCore import Qt
import cv2
import shutil

rf = Roboflow(api_key="tpYoi687CTq5QvK495ax")
project = rf.workspace("projectcell0s").project("project_cell1s")
dataset = project.version(1).download("yolov8")

class Ui_MainWindow(object):
    FILEPATH = '-1'
    FILENAME = '-1'
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(918, 684)
        MainWindow.setMaximumSize(QtCore.QSize(16777215, 16777215))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("images/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setAutoFillBackground(False)
        MainWindow.setStyleSheet("#MainWindow\n"
"{\n"
"border-image: url(images/Background4.jpg);\n"
"background-position: center center no-repeat  fixed;\n"
"background-size: 100% 100%;\n"
"\n"
"}\n"
"\n"
"\n"
"\n"
"\n"
"")
        MainWindow.setAnimated(True)
        MainWindow.setDocumentMode(False)
        MainWindow.setDockNestingEnabled(False)
        MainWindow.setUnifiedTitleAndToolBarOnMac(False)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setStyleSheet("#centralwidget {background-color: transparent;}")
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.verticalGroupBox = QtWidgets.QGroupBox(parent=self.centralwidget)
        self.verticalGroupBox.setAcceptDrops(False)
        self.verticalGroupBox.setAutoFillBackground(False)
        self.verticalGroupBox.setStyleSheet("#verticalGroupBox {\n"
"border: 1px inset #10f04f;\n"
"border-radius: 10px;\n"
"}")
        self.verticalGroupBox.setFlat(False)
        self.verticalGroupBox.setCheckable(False)
        self.verticalGroupBox.setObjectName("verticalGroupBox")
        self.vboxlayout = QtWidgets.QVBoxLayout(self.verticalGroupBox)
        self.vboxlayout.setObjectName("vboxlayout")
        self.horizontalWidget = QtWidgets.QWidget(parent=self.verticalGroupBox)
        self.horizontalWidget.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.NoContextMenu)
        self.horizontalWidget.setStyleSheet("#horizontalGroupBox {\n"
"border: 1px inset #10f04f;\n"
"}")
        self.horizontalWidget.setObjectName("horizontalWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalWidget)
        self.horizontalLayout.setContentsMargins(5, 0, 5, 0)
        self.horizontalLayout.setSpacing(10)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.labelFoto = QtWidgets.QLabel(parent=self.horizontalWidget)
        self.labelFoto.setStyleSheet("#labelFoto\n"
"{\n"
"border: 4px inset #10f0ad;\n"
"\n"
"}")
        self.labelFoto.setFrameShape(QtWidgets.QFrame.Shape.Box)
        self.labelFoto.setObjectName("labelFoto")
        self.horizontalLayout.addWidget(self.labelFoto)
        self.label_2 = QtWidgets.QLabel(parent=self.horizontalWidget)
        self.label_2.setStyleSheet("#label_2\n"
"{\n"
"border: 4px outset #10f0e9;\n"
"\n"
"}")
        self.label_2.setFrameShape(QtWidgets.QFrame.Shape.Box)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout.addWidget(self.label_2)
        self.vboxlayout.addWidget(self.horizontalWidget)
        self.gridGroupBox = QtWidgets.QGroupBox(parent=self.verticalGroupBox)
        self.gridGroupBox.setMaximumSize(QtCore.QSize(16777215, 150))
        self.gridGroupBox.setStyleSheet("#gridGroupBox {\n"
"                width: 100px;\n"
"                height:100px;\n"
"                border: 3px solid #1071f0;\n"
"                border-radius: 15px;\n"
"}")
        self.gridGroupBox.setObjectName("gridGroupBox")
        self.gridLayout = QtWidgets.QGridLayout(self.gridGroupBox)
        self.gridLayout.setContentsMargins(9, 5, 9, 0)
        self.gridLayout.setHorizontalSpacing(9)
        self.gridLayout.setVerticalSpacing(7)
        self.gridLayout.setObjectName("gridLayout")
        self.pushButtonSeg = QtWidgets.QPushButton(parent=self.gridGroupBox)
        self.pushButtonSeg.setStyleSheet("QPushButton {\n"
"  background-color: #ccaa2d;\n"
"  color: white; \n"
"  border: 1px solid gray;\n"
"  padding: 15px;\n"
"  border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,\n"
"                                      stop: 0 #FF7832, stop: 1 #FF9739);\n"
"}")
        self.pushButtonSeg.setObjectName("pushButtonSeg")
        self.gridLayout.addWidget(self.pushButtonSeg, 1, 0, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(60, 35, QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.gridLayout.addItem(spacerItem, 0, 2, 1, 1)
        self.pushButtonStart = QtWidgets.QPushButton(parent=self.gridGroupBox)
        self.pushButtonStart.setMinimumSize(QtCore.QSize(250, 0))
        self.pushButtonStart.setStyleSheet("QPushButton {\n"
"  background-color: #ccaa2d;\n"
"  color: white; \n"
"  border: 1px solid gray;\n"
"  padding: 15px;\n"
"  border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,\n"
"                                      stop: 0 #FF7832, stop: 1 #FF9739);\n"
"}")
        self.pushButtonStart.setObjectName("pushButtonStart")
        self.gridLayout.addWidget(self.pushButtonStart, 0, 0, 1, 1)
        self.horizontalWidget_2 = QtWidgets.QWidget(parent=self.gridGroupBox)
        self.horizontalWidget_2.setMinimumSize(QtCore.QSize(0, 0))
        self.horizontalWidget_2.setMaximumSize(QtCore.QSize(200, 16777215))
        self.horizontalWidget_2.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.PreventContextMenu)
        self.horizontalWidget_2.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.horizontalWidget_2.setAutoFillBackground(False)
        self.horizontalWidget_2.setStyleSheet("#horizontalGroupBox_2{           \n"
"outline: none;\n"
"}")
        self.horizontalWidget_2.setObjectName("horizontalWidget_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.horizontalWidget_2)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setSpacing(1)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.labelStart = QtWidgets.QLabel(parent=self.horizontalWidget_2)
        self.labelStart.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.labelStart.setStyleSheet("#labelStart{ color: white; }")
        self.labelStart.setObjectName("labelStart")
        self.horizontalLayout_2.addWidget(self.labelStart)
        self.labelAccuracy = QtWidgets.QLineEdit(parent=self.horizontalWidget_2)
        self.labelAccuracy.setObjectName("labelAccuracy")
        self.horizontalLayout_2.addWidget(self.labelAccuracy)
        self.gridLayout.addWidget(self.horizontalWidget_2, 3, 0, 1, 1)
        self.vboxlayout.addWidget(self.gridGroupBox)
        self.verticalLayout.addWidget(self.verticalGroupBox)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.add_functions()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.labelFoto.setText(_translate("MainWindow", "Исходное изображение, в формате .jpeg, png или .czi"))
        self.label_2.setText(_translate("MainWindow", "Результат сегментации"))
        self.pushButtonSeg.setText(_translate("MainWindow", "Cегментировать"))
        self.pushButtonStart.setText(_translate("MainWindow", "Выбрать фото"))
        self.labelStart.setText(_translate("MainWindow", "Точность: "))
        self.labelAccuracy.setText(_translate("MainWindow", "0.9"))

# ----------------> Рабочий код:

# Клик по кнопке -> (вызов функции):
    def add_functions(self):
        self.pushButtonStart.clicked.connect(self.add_image)
        self.pushButtonSeg.clicked.connect(self.predict_image)


# Основная фун-я по сегментации:
    def predict_image(self):                  # ИСПРАВИТЬ: не допускать точности, ниже 0.2;
        if Ui_MainWindow.FILEPATH != '-1':
            text = self.labelAccuracy.text() 
            FileModelPath = os.path.join(os.path.dirname(os.path.abspath(__file__)), "WorkFile\\best.pt")
            model = YOLO(FileModelPath)
            img = Image.open(Ui_MainWindow.FILEPATH)
            folder_path = 'YourPhoto\\' + Ui_MainWindow.FILENAME
            if os.path.exists(folder_path):
                shutil.rmtree(folder_path)
            predictions = model.predict(img, show = False, classes=[0,1], save = True,project='YourPhoto' ,name=Ui_MainWindow.FILENAME, show_labels = False, show_conf = False,save_txt = True, stream=False, conf=float(text), line_thickness=1)
            Path = 'YourPhoto\\' + Ui_MainWindow.FILENAME + '\\' + Ui_MainWindow.FILENAME + '.jpg'
           #print (Path)
            pixmap = QPixmap(Path)
            self.label_2.setPixmap(pixmap)

        

            #https://docs.ultralytics.com/modes/predict/
            #https://github.com/ultralytics/ultralytics/issues/1224
# фун-я, сохраняющая картинку:
    def FotoSave(self, pixmap,filename):
        folder_name = "YourPhoto"
        if not os.path.exists(folder_name):
            os.makedirs(folder_name)
        file_name = os.path.splitext(os.path.basename(filename))[0]
        dir_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "YourPhoto")
        jpg = '.jpg'
        # print (dir_path)
        filepath = os.path.join(dir_path, file_name)
        filepath = filepath + jpg
      #  print (filepath)
        Ui_MainWindow.FILEPATH = filepath
        Ui_MainWindow.FILENAME = file_name
      #  print (Ui_MainWindow.FILENAME)
        pixmap.save(filepath)


# Обработка изображения, если оно передано в формате .czi:
    def process_image(self, filename):
        if filename.endswith('.czi'):
            # Откроем ZIP-файл с помощью czifile:
            with czifile.CziFile(os.path.join(filename)) as czi:
                # Получить все каналы в файле:
                channels = czi.asarray()[0, 0, :, :, :]
                # Объедините все каналы в единое RGB-изображение:
                image_array = np.stack([channels[1], channels[2], channels[0]], axis=-1)
                # Преобразуем изображение в Pillow:
                image_array = np.squeeze(image_array)
                image = np.uint8(image_array)
                img = Image.fromarray(image)
                img = img.resize((450, 450))
                # Преобразуем из Pillow в qimage через BytesIO:
                byte_array = io.BytesIO()
                img.save(byte_array, format='PNG')
                byte_array = byte_array.getvalue()
                qimage = QImage.fromData(byte_array)
                pixmap = QPixmap.fromImage(qimage)
                self.labelFoto.setPixmap(pixmap)
                # Создадим папку и положим туда выбранное изображение:
                self.FotoSave(pixmap,filename)


# Выбор изображения и добавление его в окно для исходного изображения:
    def add_image(self):
        filename, _ = QFileDialog.getOpenFileName(None, "Open Image", os.getcwd(), "Images (*.png *.jpg *.czi)")
        if filename:
             if filename.endswith('.jpg'):
                 window_size = self.labelFoto.size()
                 pixmap = QPixmap(filename).scaled(450, 450, Qt.AspectRatioMode.KeepAspectRatio) #window_size.width(), window_size.height(), Qt.AspectRatioMode.KeepAspectRatio
                 self.labelFoto.setPixmap(pixmap)
                 self.FotoSave(pixmap,filename)

             if filename.endswith('.png'):
                 window_size = self.labelFoto.size()
                 pixmap = QPixmap(filename).scaled(450, 450, Qt.AspectRatioMode.KeepAspectRatio) #window_size.width(), window_size.height(), Qt.AspectRatioMode.KeepAspectRatio
                 self.labelFoto.setPixmap(pixmap)
                 self.FotoSave(pixmap,filename)

             if filename.endswith('.czi'):
                 self.process_image(filename)

  

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
